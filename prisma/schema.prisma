// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DisclosureType {
  PUBLIC
  FOLLOWER
  PRIVATE
}

enum FollowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum LevelName {
  Freshman
  Sophomore
  Junior
  Senior
}

model User {
  id                     Int             @id @default(autoincrement())
  email                  String          @unique
  password               String
  name                   String?
  profile                Profile?
  posts                  CulturePost[]
  ticketPosts            TicketPost[]
  tokens                 Token[]
  createdAt              DateTime        @default(now())
  sentFollowRequests     FollowRequest[] @relation("FollowRequestSender")
  receivedFollowRequests FollowRequest[] @relation("FollowRequestReceiver")
  followers              Follow[]        @relation("Following")
  following              Follow[]        @relation("Follower")
}

model Token {
  id     Int    @id @default(autoincrement())
  token  String
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model CulturePost {
  id         Int            @id @default(autoincrement())
  title      String
  emoji      String
  date       DateTime
  category   CategoryDetail @relation(fields: [categoryId], references: [id])
  categoryId Int
  disclosure DisclosureType
  review     String
  detail1    String?
  detail2    String?
  detail3    String?
  detail4    String?
  author     User           @relation(fields: [authorId], references: [id])
  authorId   Int
  photos     Photo[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model CategoryDetail {
  id            Int           @id @default(autoincrement())
  category_name String
  detail1_name  String
  detail2_name  String
  detail3_name  String
  detail4_name  String?
  CulturePost   CulturePost[]
}

model Photo {
  id            Int         @id @default(autoincrement())
  url           String
  culturePost   CulturePost @relation(fields: [culturePostId], references: [id])
  culturePostId Int
}

model FollowRequest {
  id         Int                 @id @default(autoincrement())
  fromUserId Int
  toUserId   Int
  status     FollowRequestStatus @default(PENDING)
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  sender   User @relation("FollowRequestSender", fields: [fromUserId], references: [id])
  receiver User @relation("FollowRequestReceiver", fields: [toUserId], references: [id])

  @@unique([fromUserId, toUserId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower  User @relation("Following", fields: [followerId], references: [id])
  following User @relation("Follower", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Profile {
  id           Int       @id @default(autoincrement())
  userId       Int       @unique
  user         User      @relation(fields: [userId], references: [id])
  nickname     String
  bio          String?
  birthdate    DateTime?
  interest     String?
  profilePhoto String
  exp          Int       @default(0)
  levelId      Int       @default(1)
  level        LevelName @default(Freshman)
}

model TicketPost {
  id         Int            @id @default(autoincrement())
  title      String
  emoji      String
  date       DateTime
  disclosure DisclosureType
  review     String
  author     User           @relation(fields: [authorId], references: [id])
  authorId   Int
  photos     TicketPhoto[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model TicketPhoto {
  id           Int        @id @default(autoincrement())
  url          String
  ticketPost   TicketPost @relation(fields: [ticketPostId], references: [id])
  ticketPostId Int
}
