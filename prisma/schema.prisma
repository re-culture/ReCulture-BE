// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DisclosureType {
  PUBLIC
  FOLLOWER
  PRIVATE
}

model User {
  id        Int           @id @default(autoincrement())
  email     String        @unique
  password  String
  name      String?
  articles  Article[]
  posts     CulturePost[]
  tokens    Token[]
  createdAt DateTime      @default(now())
}

model Token {
  id     Int    @id @default(autoincrement())
  token  String
  userId Int
  user   User   @relation(fields: [userId], references: [id])
}

model Article {
  id       Int     @id @default(autoincrement())
  title    String
  body     String?
  author   User    @relation(fields: [authorId], references: [id])
  authorId Int
}

model CulturePost {
  id         Int            @id @default(autoincrement())
  title      String
  emoji      String
  date       DateTime
  category   CategoryDetail @relation(fields: [categoryId], references: [id])
  categoryId Int
  disclosure DisclosureType
  review     String
  detail1    String?
  detail2    String?
  detail3    String?
  detail4    String?
  author     User           @relation(fields: [authorId], references: [id])
  authorId   Int
  photos     Photo[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model CategoryDetail {
  id            Int           @id @default(autoincrement())
  category_name String
  detail1_name  String
  detail2_name  String
  detail3_name  String
  detail4_name  String?
  CulturePost   CulturePost[]
}

model Photo {
  id            Int         @id @default(autoincrement())
  url           String
  culturePost   CulturePost @relation(fields: [culturePostId], references: [id])
  culturePostId Int
}
